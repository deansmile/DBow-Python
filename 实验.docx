Orb SLAM2 搭建
硬件：搭建Ubuntu16.04 + Ros Kinetic + Opencv3 + 工业摄像头
图像准备
相机标定
Camera.fx: 834.6
Camera.fy: 256.1
Camera.cx: 948.3
Camera.cy: 344.6

Camera.k1: 0.0
Camera.k2: 0.0
Camera.p1: 0.0
Camera.p2: 0.0

运行orb Slam需要相机标定数据和字典文件

调试及测试
opencv orb输入图像，输出一个32维的数据，体现快， 相似度高的场景，识别率不高
[237, 182, 161, 99, 172, 63, 75, 152, 83, 251, 181, 92, 211, 109, 94, 187, 221, 196, 125, 127, 187, 102, 249, 146, 207, 223, 229, 252, 218, 239, 210, 112]
原字典文件加载慢，需30秒，识别快
k = 5 L =3 时，识别不出
k=10, L =5自己生成的字典文件加载慢，识别快
在走廊识别

kmeans实验
直接kmeans
采用层次kmeans
图像向量 
[1,2,4,1,0,9] 为K**L次方维
当k， L越大时，图片向量的维度就越大，计算余弦相似度就偏小。

在变电站附近用工业摄像头拍摄一组20张的图片，标记为0.png… 在20张图片中随机选取一张作为第21张进行测试，能识别图像
在走廊拍摄20张图像
kmeans
实验结果


结论
根据自己需要的场景生成字典文件，用于orb slam，加载速递快，识别速度快。orb特征识别特性就是速度快，但它是基于局部特征的描述，对于场景之间相似度高的场景识别率不高，应采用基于位置的回环检测。层次Kmeans减少复杂度。所以对于变电站这个特征较为明显的场景，采用ORB，层次Kmeans的视觉词典创建技术，闭环检测的准确率，及时间都是比较优秀的。

测试集
加载时间
原：26s 145.3m 
0：叶子54840 8.3m 2s orb每幅图像10000个， 20张图片
1：20 k=10,L=5 叶子节点11230 2.8m 1s 但识别不了
1:30 ye 57300 8.6m 2s 识别
2：k=10,l=5,N=25 ye 87900 12.4m 2s



选图片作为字典的训练集时，要特征明显，图片足够多，保证能得到足够的叶子节点，大约需要5000个单词，系统才能识别，

k=10,L=5 34830
k=12,l=5 13380
k=10,l=6 610
k=10,l=4 10000
k=11,l=5 24266

10 5  0 3
0 0 134 109 131 186 103 76 128 141 94 155 184 172 138 92 150 123 124 190 104 201 186 161 103 142 200 199 179 143 95 191 123 113 0
0 0 132 154 129 181 123 183 91 134 166 117 149 57 158 190 79 119 175 136 196 75 76 92 172 162 196 199 90 124 122 70 118 101 0
。。。
1 0 133 131 185 198 175 58 137 195 88 196 194 178 138 104 160 109 124 211 96 204 204 192 113 153 218 211 201 148 155 229 177 120 0
1 0 178 111 150 153 97 44 99 148 81 203 181 202 151 87 157 95 98 208 109 215 191 159 172 57 213 185 191 153 88 207 95 94 0

ros
原始 
